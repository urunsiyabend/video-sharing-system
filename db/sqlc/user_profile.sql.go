// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_profile.sql

package db

import (
	"context"
	"database/sql"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profile (
    first_name,
    last_name,
    email,
    created_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, first_name, last_name, email, created_at
`

type CreateUserProfileParams struct {
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.CreatedAt,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM user_profile
WHERE id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfile, id)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT id, first_name, last_name, email, created_at FROM user_profile
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserProfile(ctx context.Context, id int64) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, id)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listUserProfiles = `-- name: ListUserProfiles :many
SELECT id, first_name, last_name, email, created_at FROM user_profile
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUserProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserProfiles(ctx context.Context, arg ListUserProfilesParams) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, listUserProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserProfile{}
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE user_profile
SET first_name = $2, last_name = $3, email = $4
WHERE id = $1
RETURNING id, first_name, last_name, email, created_at
`

type UpdateUserProfileParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
