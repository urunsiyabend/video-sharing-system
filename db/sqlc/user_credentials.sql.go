// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_credentials.sql

package db

import (
	"context"
)

const createUserCredentials = `-- name: CreateUserCredentials :one
INSERT INTO user_credentials (
    user_id,
    username,
    password
)
VALUES (
    $1, $2, $3
)
RETURNING user_id, username, password, last_login
`

type CreateUserCredentialsParams struct {
	UserID   int64  `json:"user_id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUserCredentials(ctx context.Context, arg CreateUserCredentialsParams) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, createUserCredentials, arg.UserID, arg.Username, arg.Password)
	var i UserCredential
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.LastLogin,
	)
	return i, err
}

const deleteUserCredentials = `-- name: DeleteUserCredentials :exec
DELETE FROM user_credentials
WHERE user_id = $1
`

func (q *Queries) DeleteUserCredentials(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserCredentials, userID)
	return err
}

const getUserCredentials = `-- name: GetUserCredentials :one
SELECT user_id, username, password, last_login FROM user_credentials
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserCredentials(ctx context.Context, userID int64) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, getUserCredentials, userID)
	var i UserCredential
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.LastLogin,
	)
	return i, err
}

const listUserCredentials = `-- name: ListUserCredentials :many
SELECT user_id, username, password, last_login FROM user_credentials
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type ListUserCredentialsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserCredentials(ctx context.Context, arg ListUserCredentialsParams) ([]UserCredential, error) {
	rows, err := q.db.QueryContext(ctx, listUserCredentials, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserCredential{}
	for rows.Next() {
		var i UserCredential
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE user_credentials
SET password = $2
WHERE user_id = $1
RETURNING user_id, username, password, last_login
`

type UpdatePasswordParams struct {
	UserID   int64  `json:"user_id"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.UserID, arg.Password)
	var i UserCredential
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.LastLogin,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE user_credentials
SET username = $2
WHERE user_id = $1
RETURNING user_id, username, password, last_login
`

type UpdateUsernameParams struct {
	UserID   int64  `json:"user_id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.UserID, arg.Username)
	var i UserCredential
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.LastLogin,
	)
	return i, err
}
